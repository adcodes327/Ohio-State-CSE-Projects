import java.util.Comparator;

import components.map.Map;
import components.map.Map1L;
import components.queue.Queue;
import components.queue.Queue1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Program that makes a glossary for customer corresponding HTML output file.
 *
 *
 */
public final class Glossary {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private Glossary() {

    }

    /**
     * Stores each word with it's definition in a map.
     *
     *
     * @param file
     *            the text file inputed by the user
     * @param in
     *            the input stream
     * @param terms
     *            a queue to hold only the words in the file
     * @param def
     *            a queue to hold only the definition in the file
     * @param wordsAndDef
     *            a queue of all the lines in the file
     * @param dictionary
     *            a map pairing each term with its definition
     * @requires index of each word in queue term corresponds with definition at
     *           the perspective index in def queue and is equal in.is_open
     * @ensures Map "dictionary" correctly pairs each word with definition
     * @return dictionary
     */
    public static Map<String, String> pairWords(String file, SimpleReader in,
            Queue<String> terms, Queue<String> def, Queue<String> wordsAndDef,
            Map<String, String> dictionary) {
        String definition = "";
        if (wordsAndDef.length() > 0) {
            String word = wordsAndDef.dequeue();
            terms.enqueue(word);//adding terms to queue
            definition = getDefinition(wordsAndDef);
            dictionary.add(word, definition);
            pairWords(file, in, terms, def, wordsAndDef, dictionary);

        }
        return dictionary;
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>Index</title> </head> <body>
     * <h1>the page title</h1>
     *
     * @param out
     *            the output stream
     * @updates out.content
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeaderMainPage(SimpleWriter out) {
        out.print("<html>\n" + "<head>\n" + "\t<title>" + "Index" + "</title>\n"
                + "<font size = '10' >" + "Glossary Homepage" + "</font>"
                + "</head>\n" + "<body>\n" + "<head>\n" + "\t<h1>\n"
                + "<font size = '6' >" + "Index" + "</font>" + "\t</h1>\n"
                + "</head>\n" + "</body>\n" + "</html>");
    }

    /**
     * Stores each word with it's definition in a map.
     *
     *
     * @param terms
     *            a queue to holding only the words in the file
     * @param dictionary
     *            a map pairing each term with its definition
     * @requires index of each word in queue term corresponds with definition at
     *           the perspective index in def queue and is equal in.is_open
     * @ensures Link to page with term has correct file path if definition
     *          contains an element of terms
     * @updates dictionary
     */
    public static void definitionsCheck(Map<String, String> dictionary,
            Queue<String> terms) {
        Queue<String> copyQ = new Queue1L<>();
        Map<String, String> copyM = new Map1L<>();
        copyM.transferFrom(dictionary);
        String word = "";
        while (copyM.size() > 0) {
            Map.Pair<String, String> pair = copyM.removeAny();
            copyQ.transferFrom(terms);
            String def = pair.value();
            while (copyQ.length() > 0) {
                word = copyQ.dequeue();
                String wordS = word + " ";
                if (def.contains(wordS)) {
                    def = def.replaceAll(wordS, "<a href = \"" + word
                            + ".html\">" + word + "</a> ");
                }
                terms.enqueue(word);
            }
            dictionary.add(pair.key(), def);
        }
    }

    /**
     * Reads each like of input file and puts the line in a queue
     *
     *
     * @param input
     *            reads each line of input file
     * @requires term and definition are on seperate lines, one white space is
     *           in between pairs, and input.is_open
     * @ensures lines are enqueued line by line
     * @return lines
     */
    public static Queue<String> linesFromInput(SimpleReader input) {
        assert input != null : "Violation of: input is not null";
        assert input.isOpen() : "Violation of: input.is_open";

        Queue<String> lines = new Queue1L<String>();
        while (!input.atEOS()) {
            String text = input.nextLine(); // reads next line
            lines.enqueue(text);

        }
        return lines;
    }

    /**
     * Gets definition associated with each word in file
     *
     *
     * @param wordsAndDef
     *            the text file inputed by the user
     * @requires queue to alternate between words and definitions and have a
     *           empty string between glossary term
     * @ensures definition returned is associated with correct term
     * @return definition
     */
    public static String getDefinition(Queue<String> wordsAndDef) {
        String line = wordsAndDef.dequeue();
        String definition = line;
        if (wordsAndDef.length() > 0 && !line.equals("")) {
            line = wordsAndDef.dequeue();
            definition = definition + " " + line;
            if (!line.equals("")) { //adds additional lines when def is longer than 1 line
                getDefinition(wordsAndDef);
            }
        }

        return definition;
    }

    /**
     * Makes a subpage for each word in glossary. These are the expected html
     * tags: <html> <head> <title> term </title> </head> <body>
     * <h1>term <channel> link</h1>
     * <p>
     * the return to index page option
     * </p>
     *
     * @param file
     *            the text file inputed by the user
     * @param info
     *            the map of words with their definitions
     * @param word
     *            name and head of glossary page
     * @param terms
     *            a queue with the terms from the files
     * @requires top page be named index.html
     * @ensures each term will link to a subpage that includes a link back to
     *          the main page
     */
    public static void makeSubPage(String file, Map<String, String> info,
            String word) {
        SimpleWriter output = new SimpleWriter1L(file);
        String definition = info.value(word);
        output.print("<html>\n" + "<head>\n" + "\t<title>" + word + "</title>\n"
                + "<font size = '10' color = 'red'>" + "<i><b>" + word
                + "</b></i>" + "</font>" + "</head>\n" + "<body>\n" + "<p>\n"
                + "\t<h1>\n" + "<font size = '5' >" + definition + "</font>"
                + "\t</h1>\n" + "</p>\n"
                + "<p>Return to <a href=\"index.html\">index</a>.</p>");
        output.print("</body>\n" + "</html>");
        output.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleWriter out = new SimpleWriter1L();
        SimpleReader in = new SimpleReader1L();

        out.print("Enter a location to save file: ");
        String folder = in.nextLine();
        String outFile = folder + "/index.html"; // File name that will hold main page of glossary
        SimpleWriter fout = new SimpleWriter1L(outFile);
        outputHeaderMainPage(fout);

        out.print("Enter a txt file: ");
        String inputFile = in.nextLine();
        SimpleReader inFile = new SimpleReader1L(inputFile);

        Queue<String> terms = new Queue1L<>();
        Queue<String> def = new Queue1L<>();
        Queue<String> wordsAndDef = linesFromInput(inFile);
        Map<String, String> dictionary = new Map1L<>();
        dictionary = pairWords(inputFile, inFile, terms, def, wordsAndDef,
                dictionary);
        Comparator<String> order = new StringLT(); //sorting terms in alphabetical order
        terms.sort(order);
        Queue<String> termsCopy = new Queue1L<>();
        definitionsCheck(dictionary, terms);
        while (terms.length() > 0) { //outputing words into list on main page
            String nextWord = terms.dequeue();
            termsCopy.enqueue(nextWord);
            String pageFile = folder + "/" + nextWord + ".html";
            fout.println("<li><a href = \"" + nextWord + ".html\">" + nextWord
                    + "</a></li>");
            makeSubPage(pageFile, dictionary, nextWord);
        }
        inFile.close();
        in.close();
        out.close();
        fout.close();

    }

}


import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("<!DOCTYPE html>");
        // Next 3 lines hard code the html tags into the output file
        out.println("<html>");
        out.println("<header>");
        out.print("<title>");
        String titleName = "";
        String linkName = "";
        int title = getChildElement(channel, "title");
        if (title > -1) { // executes if title tag exists
            if (channel.child(title).numberOfChildren() > 0) {
                titleName = channel.child(title).child(0).label();
                out.println(titleName + "</title>");
            }
        }
        int link = getChildElement(channel, "link");
        if (link > -1) { // executes if link tage exists
            linkName = channel.child(link).child(0).label();
        }
        out.println("</header>");
        out.println("<body>");
        out.println("<h2><a href =\" " + linkName + "\">" + titleName
                + "</a></h2>"); // links the title name
        out.println("<table border = \"1px solid black\">");
        out.println("<tr>");
        out.println("<th> Date </th>");
        out.println("<th> Source </th> ");
        out.println("<th> News </th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        // hard coding the html closing tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;
        for (int i = xml.numberOfChildren() - 1; i >= 0; i--) {
            if (tag.compareTo(xml.child(i).label()) == 0) {
                index = i;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        String date = "";
        String source = "";
        String sourceUrl = "";
        String title = "";
        String link = "";
        String description = "";
        int pubDate = getChildElement(item, "pubDate");
        if (pubDate > -1) { // searching for publication date
            date = item.child(pubDate).child(0).label();
        } else {
            date = "No Publication Date";
        }
        int linkNum = getChildElement(item, "link");
        if (linkNum > -1) { // searching for publication date
            link = item.child(linkNum).child(0).label();
        }
        int sourceNum = getChildElement(item, "source");
        if (sourceNum > -1) { //searching for source
            sourceUrl = item.child(sourceNum).attributeValue("source");
            source = item.child(sourceNum).child(0).label();
        } else {
            source = "No Source";
        }
        int titleNum = getChildElement(item, "title");
        int descNum = getChildElement(item, "description");
        if (titleNum > -1) { //searching for title
            if (item.child(titleNum).numberOfChildren() > 0) {
                title = item.child(titleNum).child(0).label();
            }
        } else if (descNum > -1) { // executes if there is a description
            if (item.child(descNum).numberOfChildren() > 0) {
                description = item.child(descNum).child(0).label();
            }
        }
        out.println("<tr>");
        out.println("<td>" + date + "</td>");
        if (source.compareTo("No Source") != 0) {
            out.println("<td><a href = \"" + sourceUrl + "\">" + source
                    + "</a></td>");
        } else {
            out.println("<td>" + source + "</td>");
        }
        String news = description;
        if (title.length() > 0) { // assigning the proper value to the news cells
            news = title;
        }
        if (news.length() == 0) {
            news = "No Title Available";
        }
        out.println("<td><a href = \"" + link + "\">" + news + "</a></td>");
        out.println("</tr>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter an URL of RSS 2.0 feed: ");
        String url = in.nextLine();
        XMLTree xml = new XMLTree1(url);
        // if user enters an invalid RSS feed
        while (xml.label().compareTo("rss") != 0 || !xml.hasAttribute("version")
                || xml.attributeValue("version").compareTo("2.0") != 0) {
            out.println("Invalid RSS feed.");
            out.print("Enter an URL of RSS 2.0 feed: ");
            url = in.nextLine();
            xml = new XMLTree1(url);
        }
        out.print("Enter the name of an output file: ");
        String output = in.nextLine();
        SimpleWriter fout = new SimpleWriter1L(output);
        XMLTree channel = xml.child(0);
        outputHeader(channel, fout);

        // checking to make sure item tag exists
        for (int i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).label().compareTo("item") == 0) {
                XMLTree item = channel.child(i);
                processItem(item, fout);
            }
        }
        outputFooter(fout);

        in.close();
        out.close();
    }

}
